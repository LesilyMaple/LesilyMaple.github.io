<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/12/hello-world/"/>
    <url>/2020/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><pre><code class="c++">#include &lt;iostream&gt;using namespace std;template&lt;class T&gt;struct Node {    T element;    Node&lt;T&gt; *next = nullptr;};template&lt;class T&gt;struct DoubleNode : Node&lt;T&gt; {    Node&lt;T&gt; *previous;};template&lt;class T&gt;class List {protected:    Node&lt;T&gt; *head;    Node&lt;T&gt; *current;    int length = 0;public:    List() {        head = new Node&lt;T&gt;();        current = head;    }    int Length() { return length; }    virtual void Add(T data) = 0;    virtual bool Delete(T data) = 0;    virtual bool Update(T old, T data) = 0;    virtual bool Search(T data) = 0;};template&lt;class T&gt;class SingleList : public List&lt;T&gt; {public:    void Add(T data) override {        auto *next = new Node&lt;T&gt;{data, nullptr};        this-&gt;current-&gt;next = next;        this-&gt;current = this-&gt;current-&gt;next;        this-&gt;length++;    }    bool Delete(T data) override {        auto previous = this-&gt;head;        auto current = previous-&gt;next;        while (current != nullptr) {            if (current-&gt;element == data) {                auto removed = current;                previous-&gt;next = current-&gt;next;                delete (removed);                this-&gt;length--;                return true;            }            previous = current;            current = current-&gt;next;        }        return false;    }    bool Update(T old, T data) override {        auto current = this-&gt;head;        while (current-&gt;next != nullptr) {            current = current-&gt;next;            if (current-&gt;element == old) {                current-&gt;element = data;                return true;            }        }        return false;    }    bool Search(T data) override {        auto current = this-&gt;head;        while (current-&gt;next != nullptr) {            current = current-&gt;next;            if (current-&gt;element == data) {                return true;            }        }        return false;    }};template&lt;class T&gt;class SingleCycleList : public SingleList&lt;T&gt; {};template&lt;class T&gt;class DoubleList : public List&lt;T&gt; {public:    void Add(T data) override {    }    void Delete(T data) override {    }    void Update(T old, T data) override {    }    bool Search(T data) override {        return false;    }};</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
